// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servicemanager

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceManagerClient is the client API for ServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceManagerClient interface {
	SetUsers(ctx context.Context, in *Users, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SMStatus, error)
	GetBoardConfigStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BoardConfigStatus, error)
	CheckBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*BoardConfigStatus, error)
	SetBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	InstallService(ctx context.Context, in *InstallServiceRequest, opts ...grpc.CallOption) (*ServiceStatus, error)
	RemoveService(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ServiceStateAcceptance(ctx context.Context, in *StateAcceptance, opts ...grpc.CallOption) (*empty.Empty, error)
	SetServiceState(ctx context.Context, in *ServiceState, opts ...grpc.CallOption) (*empty.Empty, error)
	OverrideEnvVars(ctx context.Context, in *OverrideEnvVarsRequest, opts ...grpc.CallOption) (*OverrideEnvVarStatus, error)
	InstallLayer(ctx context.Context, in *InstallLayerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveLayer(ctx context.Context, in *RemoveLayerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubscribeSMNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ServiceManager_SubscribeSMNotificationsClient, error)
	GetSystemLog(ctx context.Context, in *SystemLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetServiceLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetServiceCrashLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type serviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceManagerClient(cc grpc.ClientConnInterface) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) SetUsers(ctx context.Context, in *Users, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/SetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SMStatus, error) {
	out := new(SMStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetBoardConfigStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BoardConfigStatus, error) {
	out := new(BoardConfigStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/GetBoardConfigStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) CheckBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*BoardConfigStatus, error) {
	out := new(BoardConfigStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/CheckBoardConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) SetBoardConfig(ctx context.Context, in *BoardConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/SetBoardConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) InstallService(ctx context.Context, in *InstallServiceRequest, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/InstallService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) RemoveService(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) ServiceStateAcceptance(ctx context.Context, in *StateAcceptance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/ServiceStateAcceptance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) SetServiceState(ctx context.Context, in *ServiceState, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/SetServiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) OverrideEnvVars(ctx context.Context, in *OverrideEnvVarsRequest, opts ...grpc.CallOption) (*OverrideEnvVarStatus, error) {
	out := new(OverrideEnvVarStatus)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/OverrideEnvVars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) InstallLayer(ctx context.Context, in *InstallLayerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/InstallLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) RemoveLayer(ctx context.Context, in *RemoveLayerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/RemoveLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) SubscribeSMNotifications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ServiceManager_SubscribeSMNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceManager_ServiceDesc.Streams[0], "/servicemanager.v1.ServiceManager/SubscribeSMNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceManagerSubscribeSMNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceManager_SubscribeSMNotificationsClient interface {
	Recv() (*SMNotifications, error)
	grpc.ClientStream
}

type serviceManagerSubscribeSMNotificationsClient struct {
	grpc.ClientStream
}

func (x *serviceManagerSubscribeSMNotificationsClient) Recv() (*SMNotifications, error) {
	m := new(SMNotifications)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceManagerClient) GetSystemLog(ctx context.Context, in *SystemLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/GetSystemLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/GetServiceLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) GetServiceCrashLog(ctx context.Context, in *ServiceLogRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servicemanager.v1.ServiceManager/GetServiceCrashLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManagerServer is the server API for ServiceManager service.
// All implementations must embed UnimplementedServiceManagerServer
// for forward compatibility
type ServiceManagerServer interface {
	SetUsers(context.Context, *Users) (*empty.Empty, error)
	GetStatus(context.Context, *empty.Empty) (*SMStatus, error)
	GetBoardConfigStatus(context.Context, *empty.Empty) (*BoardConfigStatus, error)
	CheckBoardConfig(context.Context, *BoardConfig) (*BoardConfigStatus, error)
	SetBoardConfig(context.Context, *BoardConfig) (*empty.Empty, error)
	InstallService(context.Context, *InstallServiceRequest) (*ServiceStatus, error)
	RemoveService(context.Context, *RemoveServiceRequest) (*empty.Empty, error)
	ServiceStateAcceptance(context.Context, *StateAcceptance) (*empty.Empty, error)
	SetServiceState(context.Context, *ServiceState) (*empty.Empty, error)
	OverrideEnvVars(context.Context, *OverrideEnvVarsRequest) (*OverrideEnvVarStatus, error)
	InstallLayer(context.Context, *InstallLayerRequest) (*empty.Empty, error)
	RemoveLayer(context.Context, *RemoveLayerRequest) (*empty.Empty, error)
	SubscribeSMNotifications(*empty.Empty, ServiceManager_SubscribeSMNotificationsServer) error
	GetSystemLog(context.Context, *SystemLogRequest) (*empty.Empty, error)
	GetServiceLog(context.Context, *ServiceLogRequest) (*empty.Empty, error)
	GetServiceCrashLog(context.Context, *ServiceLogRequest) (*empty.Empty, error)
	mustEmbedUnimplementedServiceManagerServer()
}

// UnimplementedServiceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceManagerServer struct {
}

func (UnimplementedServiceManagerServer) SetUsers(context.Context, *Users) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsers not implemented")
}
func (UnimplementedServiceManagerServer) GetStatus(context.Context, *empty.Empty) (*SMStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedServiceManagerServer) GetBoardConfigStatus(context.Context, *empty.Empty) (*BoardConfigStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardConfigStatus not implemented")
}
func (UnimplementedServiceManagerServer) CheckBoardConfig(context.Context, *BoardConfig) (*BoardConfigStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBoardConfig not implemented")
}
func (UnimplementedServiceManagerServer) SetBoardConfig(context.Context, *BoardConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBoardConfig not implemented")
}
func (UnimplementedServiceManagerServer) InstallService(context.Context, *InstallServiceRequest) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallService not implemented")
}
func (UnimplementedServiceManagerServer) RemoveService(context.Context, *RemoveServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedServiceManagerServer) ServiceStateAcceptance(context.Context, *StateAcceptance) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStateAcceptance not implemented")
}
func (UnimplementedServiceManagerServer) SetServiceState(context.Context, *ServiceState) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceState not implemented")
}
func (UnimplementedServiceManagerServer) OverrideEnvVars(context.Context, *OverrideEnvVarsRequest) (*OverrideEnvVarStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideEnvVars not implemented")
}
func (UnimplementedServiceManagerServer) InstallLayer(context.Context, *InstallLayerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallLayer not implemented")
}
func (UnimplementedServiceManagerServer) RemoveLayer(context.Context, *RemoveLayerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLayer not implemented")
}
func (UnimplementedServiceManagerServer) SubscribeSMNotifications(*empty.Empty, ServiceManager_SubscribeSMNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSMNotifications not implemented")
}
func (UnimplementedServiceManagerServer) GetSystemLog(context.Context, *SystemLogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemLog not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceLog(context.Context, *ServiceLogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceLog not implemented")
}
func (UnimplementedServiceManagerServer) GetServiceCrashLog(context.Context, *ServiceLogRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceCrashLog not implemented")
}
func (UnimplementedServiceManagerServer) mustEmbedUnimplementedServiceManagerServer() {}

// UnsafeServiceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceManagerServer will
// result in compilation errors.
type UnsafeServiceManagerServer interface {
	mustEmbedUnimplementedServiceManagerServer()
}

func RegisterServiceManagerServer(s grpc.ServiceRegistrar, srv ServiceManagerServer) {
	s.RegisterService(&ServiceManager_ServiceDesc, srv)
}

func _ServiceManager_SetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Users)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).SetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/SetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).SetUsers(ctx, req.(*Users))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetBoardConfigStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetBoardConfigStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/GetBoardConfigStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetBoardConfigStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_CheckBoardConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).CheckBoardConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/CheckBoardConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).CheckBoardConfig(ctx, req.(*BoardConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_SetBoardConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).SetBoardConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/SetBoardConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).SetBoardConfig(ctx, req.(*BoardConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_InstallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).InstallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/InstallService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).InstallService(ctx, req.(*InstallServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).RemoveService(ctx, req.(*RemoveServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_ServiceStateAcceptance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateAcceptance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).ServiceStateAcceptance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/ServiceStateAcceptance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).ServiceStateAcceptance(ctx, req.(*StateAcceptance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_SetServiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).SetServiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/SetServiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).SetServiceState(ctx, req.(*ServiceState))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_OverrideEnvVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideEnvVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).OverrideEnvVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/OverrideEnvVars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).OverrideEnvVars(ctx, req.(*OverrideEnvVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_InstallLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).InstallLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/InstallLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).InstallLayer(ctx, req.(*InstallLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_RemoveLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).RemoveLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/RemoveLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).RemoveLayer(ctx, req.(*RemoveLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_SubscribeSMNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceManagerServer).SubscribeSMNotifications(m, &serviceManagerSubscribeSMNotificationsServer{stream})
}

type ServiceManager_SubscribeSMNotificationsServer interface {
	Send(*SMNotifications) error
	grpc.ServerStream
}

type serviceManagerSubscribeSMNotificationsServer struct {
	grpc.ServerStream
}

func (x *serviceManagerSubscribeSMNotificationsServer) Send(m *SMNotifications) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceManager_GetSystemLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetSystemLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/GetSystemLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetSystemLog(ctx, req.(*SystemLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/GetServiceLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceLog(ctx, req.(*ServiceLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_GetServiceCrashLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).GetServiceCrashLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicemanager.v1.ServiceManager/GetServiceCrashLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).GetServiceCrashLog(ctx, req.(*ServiceLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceManager_ServiceDesc is the grpc.ServiceDesc for ServiceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicemanager.v1.ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUsers",
			Handler:    _ServiceManager_SetUsers_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ServiceManager_GetStatus_Handler,
		},
		{
			MethodName: "GetBoardConfigStatus",
			Handler:    _ServiceManager_GetBoardConfigStatus_Handler,
		},
		{
			MethodName: "CheckBoardConfig",
			Handler:    _ServiceManager_CheckBoardConfig_Handler,
		},
		{
			MethodName: "SetBoardConfig",
			Handler:    _ServiceManager_SetBoardConfig_Handler,
		},
		{
			MethodName: "InstallService",
			Handler:    _ServiceManager_InstallService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _ServiceManager_RemoveService_Handler,
		},
		{
			MethodName: "ServiceStateAcceptance",
			Handler:    _ServiceManager_ServiceStateAcceptance_Handler,
		},
		{
			MethodName: "SetServiceState",
			Handler:    _ServiceManager_SetServiceState_Handler,
		},
		{
			MethodName: "OverrideEnvVars",
			Handler:    _ServiceManager_OverrideEnvVars_Handler,
		},
		{
			MethodName: "InstallLayer",
			Handler:    _ServiceManager_InstallLayer_Handler,
		},
		{
			MethodName: "RemoveLayer",
			Handler:    _ServiceManager_RemoveLayer_Handler,
		},
		{
			MethodName: "GetSystemLog",
			Handler:    _ServiceManager_GetSystemLog_Handler,
		},
		{
			MethodName: "GetServiceLog",
			Handler:    _ServiceManager_GetServiceLog_Handler,
		},
		{
			MethodName: "GetServiceCrashLog",
			Handler:    _ServiceManager_GetServiceCrashLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSMNotifications",
			Handler:       _ServiceManager_SubscribeSMNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "servicemanager/servicemanager.proto",
}
